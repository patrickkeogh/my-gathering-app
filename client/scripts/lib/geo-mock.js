// Generated by CoffeeScript 1.6.3
/*
(c) 2011 Jan Monschke
v1.0.1
GeoMock is licensed under the MIT license.
*/


(function() {
  (function() {
    if (typeof navigator === "undefined" || navigator === null) {
      window.navigator = {};
    }
    if (navigator.geolocation === null) {
      window.navigator.geolocation = {};
    }
    navigator.geolocation.delay = 1000;
    navigator.geolocation.shouldFail = false;
    navigator.geolocation.failsAt = -1;
    navigator.geolocation.errorMessage = "There was an error retrieving the position!";
    navigator.geolocation.currentTimeout = -1;
    navigator.geolocation.lastPosReturned = 0;

    navigator.geolocation._sanitizeLastReturned = function() {
      console.log('Sanatise Coords');
      console.log('Waypoint length:' + this.waypoints.length);
      console.log('Pos Returned:' + this.lastPosReturned);

      if (this.lastPosReturned >= this.waypoints.length - 1) {
        console.log('Reset GPO Coords');
        return this.lastPosReturned = 0;
      }

      this.lastPosReturned++;

      console.log('Pos Returneds:' + this.lastPosReturned);

      return this.lastPosReturned;

    };
    navigator.geolocation._geoCall = function(method, success, error) {

      if (this.shouldFail && (error !== null)) {
        return this.currentTimeout = window[method].call(null, function() {
          return error(this.errorMessage);
        }, this.delay);
      } else {
        if (success !== null) {
          return this.currentTimeout = window[method].call(null, function() {
            console.log('Pos Returned2:' + this.lastPosReturned);

            success(this.waypoints[this.lastPosReturned]);
            return this.sanitizeLastReturned();
          }, this.delay);
        }
      }
    };
    navigator.geolocation.getCurrentPosition = function(success, error) {
      return this._geoCall("setTimeout", success, error);
    };
    navigator.geolocation.watchPosition = function(success, error) {
      this._geoCall("setInterval", success, error);
      return this.currentTimeout;
    };
    navigator.geolocation.clearWatch = function(id) {
      return clearInterval(id);
    };
    return navigator.geolocation.waypoints = [
      {
        coords: {
          latitude: 31.503629,
          longitude: 52.523435,
        }
      }, {
        coords: {
          latitude: 44.399,
          longitude: -79.727,
        }      
      }
    ];
  })();

}).call(this);